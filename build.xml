<?xml version="1.0" encoding="utf-8" ?>
<project name="reset-tool" default="build">
	<!-- All properties may be overidden using below specified property -->
	<!-- files: .build.properties or .devel.properties -->

	<!-- developer's properties (optional) - you can override here various defaults -->
	<property file=".devel.properties" />

	<!-- property file (required!) to retrieve settings from WILI-S build -->
	<!-- system (they are recreated automatically) -->
	<property file=".build.properties" />

	<!-- Default brand -->
	<property name="BRAND" value="noname"/>

	<!-- Branding properties (optional) - company name, custom skin name, locale, etc. -->
	<property file="${basedir}/etc/branding/${BRAND}/branding.properties" />

	<!-- Default properties -->
	<property file="default.properties" />

	<path id="project.classpath">
		<pathelement location="${BUILD_DIR}"/>
	</path>

	<condition property="do.obfuscate">
		<equals arg1="${OB}" arg2="1" />
	</condition>

	<property name="compilein_images" value="${basedir}/src/images/" />
	<property name="compilein_properties" value="${basedir}/src/project.properties" />
	<property name="compilein_languages" value="${basedir}/src/languages/" />
	<property name="mainclass" value="com.wilibox.discovery.Main"/>
	<property name="obfuscationlog" value="obfuscation.log.gz"/>

	<!-- =================================
	      target: clean
	     ================================= -->
	<target name="clean" description="Clean up">
		<delete dir="${BUILD_DIR}" />
		<delete dir="${DIST_DIR}" />
		<delete dir="${compilein_images}" />
		<delete file="${compilein_properties}" />
		<delete dir="${compilein_languages}" />
	</target>

	<!-- =================================
		  target: init
		 ================================= -->
	<target name="init" description="setup build">
		<tstamp>
			<format property="build_time" pattern="yyyyMMdd.HHmm" />
		</tstamp>

		<mkdir dir="${BUILD_DIR}" />
		<mkdir dir="${DIST_DIR}" />

		<!-- Get svn revision -->
		<exec outputproperty="revision_number" executable="svnversion" dir="${basedir}" />

		<filterset id="skinInfo">
			<filter token="AppName" value="${APP_NAME}"/>
			<filter token="AppVersion" value="${APP_VERSION}"/>
			<filter token="AppRevision" value="${revision_number}"/>
			<filter token="CompanyName" value="${COMPANY_NAME}"/>
			<filter token="Locale" value="${APP_LOCALE}"/>
			<filter token="BuildTime" value="${build_time}" />
			<filter token="BackgroundColor" value="${BACKGROUND_COLOR}" />
		</filterset>

		<property name="image_name" value="${APP_NAME}.${BRAND}.${APP_LOCALE}.${APP_VERSION}.${revision_number}.${build_time}.jar" />

		<echo>Application name: ${APP_NAME}</echo>
		<echo>Company: ${COMPANY_NAME}</echo>
		<echo>Locale: ${APP_LOCALE}</echo>
		<echo>Version: ${APP_VERSION}</echo>
		<echo>Revision: ${revision_number}</echo>
		<echo>Build time: ${build_time}</echo>
		<echo>Brand: ${BRAND}</echo>
		<echo></echo>
		<echo>Final image name: ${image_name}</echo>

		<mkdir dir="${compilein_images}"/>

		<!-- Copy branded images for building time only to temporary directory -->
		<copy todir="${compilein_images}">
			<fileset dir="${basedir}/etc/branding/${BRAND}/" includes="*.png" />
		</copy>

		<propertyfile file="${compilein_properties}" comment="This file is automatically generated - DO NOT EDIT">        
			<entry key="buildtime" value="${build_time}"/>
			<entry key="build" value="${revision_number}"/>
			<entry key="version" value="${APP_VERSION}"/>
			<entry key="language" value="${APP_LOCALE}"/>
			<entry key="caption" value="${COMPANY_NAME} - Reset Tool"/>
		</propertyfile>

		<mkdir dir="${compilein_languages}"/>

		<copy todir="${compilein_languages}">
			<fileset dir="${basedir}/etc/languages/" includes="*.properties" />
		</copy>

	</target>

	<!-- =================================
	      target: build
	     ================================= -->
	<target name="build" depends="init" description="builds application">
		<javac debug="yes" debuglevel="lines,vars,source" target="1.5" source="1.5" destdir="${BUILD_DIR}">
			<src path="${basedir}/src/"/>
			<classpath refid="project.classpath"/>         	
		</javac>
	</target>


	<!-- =================================
          target: build.jar
         ================================= -->
	<target name="build.jar" depends="init, build" description="makes JAR file">
		<!-- copy resources -->
		<copy todir="out">
			<fileset dir="src">
				<include name="**/*.xml" />
				<include name="**/*.properties" />
				<include name="**/*.jpg" />
				<include name="**/*.png" />
				<include name="**/*.gif" />
				<include name="**/*.ico" />
			</fileset>
		</copy>

		<property name="distname" value="${DIST_DIR}/${image_name}" />

		<jar jarfile="${distname}" basedir="out" manifest="manifest.mf" />
	</target>

	<!-- =================================
          target: dist
         ================================= -->
	<target name="dist" depends="build.jar, obfuscate" description="makes and obfuscates JAR">
		<symlink resource="${image_name}" link="${DIST_DIR}/reset-tool.jar" overwrite="yes"/>
	</target>



	<!-- =================================
          target: obfuscate
         ================================= -->
	<target name="obfuscate" depends="build.jar" if="do.obfuscate">
		<taskdef name="obfuscate" classname="com.yworks.yguard.ObfuscatorTask" 
				classpath="${basedir}/lib/yguard.jar"/>
		<obfuscate mainclass="${mainclass}" logfile="${obfuscationlog}" 
				replaceclassnamestrings="true">
			<inoutpair in="${distname}" out="${DIST_DIR}/obf-${image_name}"/>
			<property name="error-checking" value="pedantic"/>
			<adjust replaceContent="true">
				<include name="**/*.xml"/>
			</adjust>
		</obfuscate>
		<move file="${image_name}" tofile="real-${image_name}"/>
		<move file="obf-${image_name}" tofile="${image_name}"/>
	</target>

</project>

